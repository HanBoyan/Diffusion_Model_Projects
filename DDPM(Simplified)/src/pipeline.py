import torch
import numpy as np
from tqdm import tqdm

from .ddpm import DDPMSampler

HEIGHT = 512
WIDTH = 512
LATENTS_HEIGHT = 512 // 8
LATENTS_WIDTH = 521 // 8

def generate(
        prompt:str,
        negative_prompt:str,
        input_image = None,
        strength = 0.8,
        do_cfg = True,
        cfg_scale = 7.5,
        sampler_name = 'ddpm',
        n_inference_step = 50,
        models = {},
        seed = None,
        device = None,
        idel_device = None,
        tokenizer = None
        ):
    

    with torch.no_grad():

        if not (0<strength<=1):
            raise ValueError('Strength must be between 0 and 1')
        
        if idel_device:
            to_idel : lambda x: x.to(idel_device)
        else:
            to_idel: lambda x :x

        generator = torch.Generator(device = device)
        if seed is None:
            generator.seed()
        else:
            generator.manual_seed(seed)

        clip = models['clip']
        clip.to(device)

        if do_cfg:
            #convert prompts to tokens by tokenizer
            cond_tokens = tokenizer.batch_encode_plus([prompt],padding = 'max_length',max_length = 77).input_ids
            #(batch_size,seq_len) -> (batch_size,seq_len,embed_size)
            cond_tokens = torch.tensor(cond_tokens,dtype= torch.long,device = device)
            cond_context = clip(cond_tokens)

            negative_tokens = tokenizer.batch_encode_plus([negative_prompt],padding = 'max_length',max_length = 77).input_ids
            negative_tokens = torch.tensor(negative_tokens,dtype=torch.long,device=device)
            negative_context = clip(negative_tokens)

            #(2ï¼Œseq_len,embed_size) = (2,77,768)
            context = torch.cat([cond_context,negative_context])
        else:
            tokens = tokenizer.batch_encode_plus([prompt],padding = 'max_length',max_length = 77).input_ids
            #(batch_size,seq_len) -> (batch_size,seq_len,embed_size)
            tokens = torch.tensor(tokens,dtype= torch.long,device = device)
            context = clip(tokens)

        to_idel(clip)

        if sampler_name == 'ddpm':
            sampler = DDPMSampler(generator)
            sampler.set_inference_step(n_inference_step)
        else:
            raise ValueError(f'Sampler {sampler_name} is not supported')
        
        lantent_shape = (1,4,LATENTS_HEIGHT,LATENTS_WIDTH)

        if input_image:
            encoder = models["encoder"]
            encoder.to(device)

            input_image_tensor = input_image.resize([WIDTH,HEIGHT])
            input_image_tensor = np.array(input_image_tensor)

            #(Height,Width,3)
            input_image_tensor = torch.tensor(input_image_tensor,dtype=torch.float32)
            
            input_image_tensor = rescale(input_image_tensor,(0,255),(-1,1))
            #(Height,Width,3) -> #(1,3,Height,Width)
            input_image_tensor = input_image_tensor.unsqueeze(0).permute(0,3,1,2)

            encoer_noise = torch.randn(lantent_shape,generator=generator,device=device)
            #run img through vae encoder
            latents = encoder(input_image_tensor,encoer_noise)

            sampler.set_strength(strength = strength)
            latents = sampler.add_noise(latents,sampler.timestep[0])

            to_idel(encoder)
        else:
            latents = torch.randn(lantent_shape,generator=generator,device=device)

        diffusion = models['diffusion']
        diffusion.to(device)

        timesteps = tqdm(sampler.timesteps)
        for i,timestep in enumerate(timesteps):
            time_embedding = get_time_embedding(timestep).to(device)

            model_input = latents

            if do_cfg:
                model_input = model_input.repeat(2,1,1,1)

            model_output = diffusion(model_input,context,time_embedding)

            if do_cfg:
                output_cond,output_uncond = model_output.chunk(2)

                model_output = cfg_scale * (output_cond - output_uncond) + output_uncond

            #Remove noise generated by UNet
            latents = sampler.step(timestep,latents,model_output)

        to_idel(diffusion)

        decoder = models['decoder']
        decoder.to(device)

        images = decoder(latents)

        images = rescale(images,(-1,1),(0,255),clamp=True)
        images = images.permute(0,2,3,1)

        images = images.to('cpu',torch.uint8).numpy()

        return images[0]

def rescale(x,old_range:tuple,new_range:tuple,clamp = False):
    old_min,old_max = old_range
    new_min,new_max = new_range

    x -= old_min
    x *= (new_max - new_min)/(old_max - old_min)
    x += new_min

    if clamp:
        x = x.clamp(new_min,new_max)

    return x


def get_time_embedding(timestep):

    #(160,)
    freqs = torch.pow(10000,torch.arange(start=0,end=160,dtype=torch.float32)/160)
    #(1,160)
    x = torch.tensor([timestep],dtype=torch.float32)[:,None] * freqs[None,:]

    return torch.cat([torch.cos(x),torch.sin(x)],dim=-1)





